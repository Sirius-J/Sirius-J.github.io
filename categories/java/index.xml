<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 狄俊&#39;s blog</title>
    <link>https://dijun.cf/categories/java/</link>
    <description>Recent content in Java on 狄俊&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Jul 2018 10:55:42 +0000</lastBuildDate><atom:link href="https://dijun.cf/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java并发之ReentrantReadWriteLock</title>
      <link>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Breentrantreadwritelock/</link>
      <pubDate>Sun, 08 Jul 2018 10:55:42 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Breentrantreadwritelock/</guid>
      <description>&lt;h1 id=&#34;readwritelock&#34;&gt;ReadWriteLock&lt;/h1&gt;
&lt;p&gt;ReadWriteLock是一个读写锁接口，所谓读写锁，是对访问资源共享锁和互斥锁，一般的重入性语义为如果对资源加了写锁，其他线程无法再获得写锁与读锁，但是持有写锁的线程，可以对资源加读锁（锁降级）；如果一个线程对资源加了读锁，其他线程可以继续加读锁。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java并发之ReentrantLock</title>
      <link>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Breentrantlock/</link>
      <pubDate>Thu, 05 Jul 2018 19:10:26 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Breentrantlock/</guid>
      <description>&lt;h1 id=&#34;lock介绍&#34;&gt;Lock介绍&lt;/h1&gt;
&lt;p&gt;Lock在Java中是一个接口，在这个接口中仅仅定义了6个方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lockInterruptibly&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryLock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryLock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; time&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TimeUnit unit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; InterruptedException&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    Condition &lt;span style=&#34;color:#a6e22e&#34;&gt;newCondition&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java并发之AQS</title>
      <link>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Baqs/</link>
      <pubDate>Mon, 02 Jul 2018 13:14:53 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Baqs/</guid>
      <description>&lt;h1 id=&#34;aqs类介绍&#34;&gt;AQS类介绍&lt;/h1&gt;
&lt;p&gt;AQS类全称AbstractQueuedSynchronizer，Java在AQS类中提供了一系列的模板代码，用来实现Java中一系列的同步工具，很多同步工具都是通过内部类继承自AQS类，通过重写AQS类的方法来实现的，如ReentrantLock类、ReentrantReadWriteLock等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java并发之CAS</title>
      <link>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Bcas/</link>
      <pubDate>Mon, 02 Jul 2018 09:47:39 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8Bcas/</guid>
      <description>&lt;h1 id=&#34;cas算法介绍&#34;&gt;CAS算法介绍&lt;/h1&gt;
&lt;p&gt;CAS算法全称为Compare and swap，翻译成中文就是“比较与交换”，是一种有名的无锁算法。无锁编程，就是指在不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步。&lt;/p&gt;
&lt;p&gt;在CAS算法中需要理解3个操作数，内存值V，旧的预期值A，要修改的新值B。&lt;/p&gt;
&lt;p&gt;当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做，这就是CAS算法。现代的CPU提供了特殊的指令，可以自动更新共享数据，而且能够检测到其他线程的干扰。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java并发之线程安全</title>
      <link>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sun, 01 Jul 2018 13:14:53 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</guid>
      <description>&lt;h1 id=&#34;线程不安全&#34;&gt;线程不安全&lt;/h1&gt;
&lt;p&gt;首先我们来看一段代码：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java并发之多线程</title>
      <link>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 01 Jul 2018 10:31:49 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;写在前面&#34;&gt;写在前面&lt;/h1&gt;
&lt;p&gt;多线程，是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理或同时多线程处理器。在一个程序中，这些独立运行的程序片段叫作“线程”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java容器源码分析之HashMap与HashSet</title>
      <link>https://dijun.cf/java%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bhashmap%E4%B8%8Ehashset/</link>
      <pubDate>Sat, 07 Apr 2018 13:00:57 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Bhashmap%E4%B8%8Ehashset/</guid>
      <description>&lt;h1 id=&#34;hashmap与hashset介绍&#34;&gt;HashMap与HashSet介绍&lt;/h1&gt;
&lt;p&gt;HashMap是Java为我们提供的一个存放键值对的容器，通过键的hash值定位存储位置，具有很快的访问速度。但是其遍历顺序是不确定的，这里所说的不确定是指其遍历的顺序与放入顺序不一致、多次遍历输出顺序不一致(可能会放进数据导致reHash，改变原有顺序)。HashMap允许有一个null的键，对于值没做要求。HashMap也是个非线程安全的容器，在并发环境下可以使用ynchronizedMap方法使HashMap具有线程安全的能力，或者使用ConcurrentHashMap。&lt;/p&gt;
&lt;p&gt;HashSet是Java为我们提供的一个集合类容器，他不允许容器内元素重复，底层采用HashMap实现(适配器模式)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java容器源码分析之LinkedList</title>
      <link>https://dijun.cf/java%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Blinkedlist/</link>
      <pubDate>Wed, 28 Mar 2018 10:07:33 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Blinkedlist/</guid>
      <description>&lt;h1 id=&#34;linkedlist简介&#34;&gt;LinkedList简介&lt;/h1&gt;
&lt;p&gt;LinkedList是一个使用双向链表结构实现的容器，与ArrayList一样，它能动态扩充其长度，LinkedList相较于ArrayList，其任意位置插入速度比ArrayList要快，但是其查询速度要比ArrayList要慢；LinkedList继承自AbstractSequentialList，实现了List、Deque、Cloneable、Serializable接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java容器源码分析之ArrayList</title>
      <link>https://dijun.cf/java%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Barraylist/</link>
      <pubDate>Tue, 27 Mar 2018 16:28:47 +0000</pubDate>
      
      <guid>https://dijun.cf/java%E5%AE%B9%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8Barraylist/</guid>
      <description>&lt;h1 id=&#34;arraylist简介&#34;&gt;ArrayList简介&lt;/h1&gt;
&lt;p&gt;ArrayList是一个使用数组实现的容器，与普通的数组相比，它能动态的扩容，ArrayList继承自AbstractList，实现了List、RandomAccess、Cloneable、Serializable接口。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
